// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
  @@index([createdById])
}

// Necessary for Next auth
model Account {
  id                String     @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String     @unique
  refresh_token     String?    @db.Text
  access_token      String?    @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.Text
  session_state     String?
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Activity          Activity[]

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  cartItems        CartItem[]
  design           Design[]
  stripeCustomerId String?    @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  userId                        Account @relation(fields: [athlete], references: [id])
  athlete                       String
  name                          String?
  distance                      Float
  moving_time                   Int
  elapsed_time                  Int
  total_elevation_gain          Float
  type                          String
  sport_type                    String
  workout_type                  Int? // '?' means it's optional in Prisma
  id                            BigInt  @id @unique
  start_date                    String
  start_date_local              String
  timezone                      String?
  utc_offset                    Float
  location_city                 String? // 'null | type' becomes 'type?' in Prisma
  location_state                String? // 'null | type' becomes 'type?' in Prisma
  location_country              String?
  achievement_count             Int
  kudos_count                   Int
  comment_count                 Int
  athlete_count                 Int
  photo_count                   Int
  mapId                         String?
  summaryPolyline               String  @db.Text
  trainer                       Boolean
  commute                       Boolean
  manual                        Boolean
  private                       Boolean
  visibility                    String?
  flagged                       Boolean
  gear_id                       String?
  lat_start                     Float
  lng_start                     Float
  lat_end                       Float
  lng_end                       Float
  average_speed                 Float
  max_speed                     Float
  average_cadence               Float?
  has_heartrate                 Boolean
  average_heartrate             Float?
  max_heartrate                 Float?
  heartrate_opt_out             Boolean
  display_hide_heartrate_option Boolean
  elev_high                     Float?
  elev_low                      Float?
  upload_id                     BigInt?
  upload_id_str                 String?
  external_id                   String?
  from_accepted_tag             Boolean
  pr_count                      Int
  total_photo_count             Int
  has_kudoed                    Boolean

  @@index([athlete])
}

// Define the Product model with a unique constraint on the 'name' field
model CartItem {
  id       Int    @id @default(autoincrement())
  amount   Int    @default(1)
  // Define a many-to-many relationship between Product and Cart
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  design   Design @relation(fields: [designId], references: [id], onDelete: Cascade)
  designId Int    @unique

  @@index([userId, designId])
}

model Design {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  productType     String
  name            String
  // Define a many-to-many relationship between Product and Cart
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  activityTypes   String    @db.Text
  years           String    @default("2023")
  backgroundColor String
  strokeColor     String
  previewSvg      String    @db.MediumText
  CartItem        CartItem?
  Collage         Collage?
  Heatmap         Heatmap?

  @@index([userId])
}

model Collage {
  id            Int     @id @default(autoincrement())
  designId      Int     @unique
  primaryText   String
  secondaryText String
  useText       Boolean
  collageType   String
  Design        Design  @relation(fields: [designId], references: [id], onDelete: Cascade)

  @@index([designId])
}

model Heatmap {
  id            Int     @id @default(autoincrement())
  designId      Int     @unique
  primaryText   String
  secondaryText String
  useText       Boolean
  Design        Design  @relation(fields: [designId], references: [id])

  @@index([designId])
}

model CheckoutProduct {
  id          Int    @id @default(autoincrement())
  previewSvg  String @db.MediumText
  productType String
  name        String
  quantity    Int
  checkoutId  String
  price       Float

  @@index([checkoutId])
}
